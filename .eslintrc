{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json", // Path to your tsconfig.json file
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    "@typescript-eslint/consistent-return": "error",
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "angle-bracket", // Enforces or allows the angle bracket syntax
        "objectLiteralTypeAssertions": "allow" // Allows {} as Type for object literals
      }
    ],
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "@typescript-eslint/member-ordering": [
      "error",
      {
        "default": [
          // Index signature
          "signature",
          "call-signature",
          // Fields first (ordered by private, protected, public)
          "#private-static-field",
          "public-static-field",
          "protected-static-field",
          "private-static-field",
          "private-decorated-field",
          "protected-decorated-field",
          "public-decorated-field",
          "#private-instance-field",
          "private-instance-field",
          "protected-instance-field",
          "public-instance-field",
          "#private-field",
          "private-field",
          "protected-abstract-field",
          "protected-field",
          "public-abstract-field",
          "public-field",
          "decorated-field",
          "field",
          // Static initialization
          "static-initialization",
          // Constructor next
          "private-constructor",
          "protected-constructor",
          "public-constructor",
          // Accessors
          "#private-static-accessor",
          "private-static-accessor",
          "protected-static-accessor",
          "public-static-accessor",
          "private-decorated-accessor",
          "protected-decorated-accessor",
          "public-decorated-accessor",
          "#private-instance-accessor",
          "private-instance-accessor",
          "protected-instance-accessor",
          "public-instance-accessor",
          "protected-abstract-accessor",
          "public-abstract-accessor",
          "#private-accessor",
          "private-accessor",
          "protected-accessor",
          "public-accessor",
          "static-accessor",
          "instance-accessor",
          "abstract-accessor",
          "decorated-accessor",
          "accessor",
          // Setters
          "#private-static-set",
          "private-static-set",
          "protected-static-set",
          "public-static-set",
          "private-decorated-set",
          "protected-decorated-set",
          "public-decorated-set",
          "#private-instance-set",
          "private-instance-set",
          "protected-instance-set",
          "public-instance-set",
          "protected-abstract-set",
          "public-abstract-set",
          "#private-set",
          "private-set",
          "protected-set",
          "public-set",
          "static-set",
          "instance-set",
          "abstract-set",
          "decorated-set",
          "set",
          // Static methods after fields (ordered by private, protected, public)
          "#private-static-method",
          "private-static-method",
          "protected-static-method",
          "public-static-method",
          "private-decorated-method",
          "protected-decorated-method",
          "public-decorated-method",
          "protected-abstract-method",
          "public-abstract-method",
          "#private-instance-method",
          "private-instance-method",
          "protected-instance-method",
          "public-instance-method",
          "#private-method",
          "private-method",
          "protected-method",
          "public-method"
        ]
      }
    ],
    "@typescript-eslint/method-signature-style": [
      "error",
      "property"
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variableLike", // Enforces camelCase for variables and functions
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow", // Allow variables with leading underscore (e.g., _myVariable)
        "trailingUnderscore": "allow" // Allow trailing underscores if needed (e.g., myVariable_)
      },
      {
        "selector": "class", // Enforces PascalCase for classes
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": "typeAlias", // Enforces PascalCase for type aliases
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": "interface", // Enforces interfaces to start with 'I'
        "format": [
          "PascalCase"
        ],
        "custom": {
          "regex": "^I[A-Z]",
          "match": true
        }
      },
      {
        "selector": "enum", // Enforces UPPER_CASE for enums
        "format": [
          "UPPER_CASE"
        ]
      }
    ],
    "@typescript-eslint/explicit-function-return-type": [
      "error", // Ensures that all functions explicitly define their return type
      {
        "allowExpressions": false, // Disallows arrow functions without return types
        "allowTypedFunctionExpressions": false
      }
    ],
    "@typescript-eslint/typedef": [
      "error",
      {
        "variableDeclaration": true, // Enforces explicit type for all variables
        "arrowParameter": true, // Enforces explicit type for arrow function parameters
        "memberVariableDeclaration": true // Enforces explicit type for class member variables
      }
    ]
  }
}

